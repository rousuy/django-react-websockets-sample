version: '3.9'

services:
  backend:
    image: backend
    container_name: backend
    build:
      context: ./backend
      dockerfile: ./dev_resources/Dockerfile
      args:
        - USER_ID=${USER_ID}
        - GROUP_ID=${GROUP_ID}
    volumes:
      - ./backend:/workspace:z
    command: python manage.py runserver 0.0.0.0:8000
    ports:
      - 8000:8000
    env_file:
      - ./backend/.env
    depends_on:
      db:
        condition: service_started
    restart: on-failure

  frontend:
    image: frontend
    container_name: frontend
    build:
      context: ./frontend
      dockerfile: ./dev_resources/Dockerfile
      args:
        - USER_ID=${USER_ID}
        - GROUP_ID=${GROUP_ID}
    volumes:
      - ./frontend:/workspace:z
    ports:
      - 3000:3000
    env_file:
      - ./frontend/.env
    command: npm start
  
  db:
    image: postgres:15.4-alpine
    container_name: db
    volumes:
      - djmeet_data:/var/lib/postgresql/data/
    environment:
      - POSTGRES_DB=djmeet-dev
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U postgres']
      interval: 5s
      timeout: 5s
      retries: 5
    ports:
      - '5435:5432'

volumes:
  djmeet_data:
